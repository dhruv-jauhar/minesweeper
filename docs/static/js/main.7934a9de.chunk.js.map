{"version":3,"sources":["functions.jsx","Main.jsx","index.js"],"names":["openSurrounding","col","row","props","moves","count","a","b","board","length","boardState","openBox","temp","temp1","hintState","setHintState","setMessage","setRunTime","i","j","setBoardState","gameOver","mines","time","toFixed","hintCount","flag","flagCount","setFlagCount","handleClick","click","runTime","message","addMines","rows","columns","zeros","Math","min","bomb","floor","random","abs","isSolvable","tempOpen","setBoard","flagged","closed","dimensions","array","push","slice","initialize","cols","setHintCount","setTimeout","setTime","transpose","matrix","map","c","r","hint","NewGame","React","memo","useState","showCustom","setShowCustom","setValues","setRows","setCols","setMines","className","onClick","setShowNewGameSettings","Fragment","type","autoFocus","id","placeholder","autoComplete","document","getElementById","value","window","alert","parseInt","Menu","setDoesClickOpen","doesClickOpen","Gameboard","useEffect","querySelectorAll","forEach","el","addEventListener","e","preventDefault","colNo","tile","rowNo","onContextMenu","Main","isHovering","setIsHovering","showNewGameSettings","hidden","interval","setInterval","clearInterval","onMouseOver","onMouseLeave","transposeAll","ReactDOM","render","StrictMode"],"mappings":"2LAAaA,EAAkB,SAACC,EAAKC,EAAKC,GAGtC,IAFA,IAAIC,EAAQ,EAAE,EAAG,EAAG,GAChBC,EAAM,EACDC,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACfN,EAAMG,EAAME,IAAM,GAAKL,EAAMG,EAAME,GAAKH,EAAMK,MAAMC,QAAUP,EAAME,EAAMG,IAAM,GAAKL,EAAME,EAAMG,GAAKJ,EAAMK,MAAM,GAAGC,QAAyD,IAA/CN,EAAMO,WAAWT,EAAIG,EAAME,IAAIJ,EAAIE,EAAMG,KACxKF,IAGZ,GAAIA,IAAQF,EAAMK,MAAMP,GAAKC,GAC7B,IAAKI,EAAI,EAAGA,EAAI,EAAGA,IACf,IAAKC,EAAI,EAAGA,EAAI,EAAGA,IACXN,EAAMG,EAAME,IAAM,GAAKL,EAAMG,EAAME,GAAKH,EAAMK,MAAMC,QAAUP,EAAME,EAAMG,IAAM,GAAKL,EAAME,EAAMG,GAAKJ,EAAMK,MAAM,GAAGC,QAAyD,IAA/CN,EAAMO,WAAWT,EAAIG,EAAME,IAAIJ,EAAIE,EAAMG,KACxKI,EAAQV,EAAIG,EAAME,GAAIJ,EAAIE,EAAMG,GAAIJ,IAgBvCQ,EAAU,SAACV,EAAKC,EAAKC,GAC9B,IAAIS,EAAKT,EAAMO,WACfE,EAAKX,GAAKC,GAAK,EACa,IAAxBC,EAAMK,MAAMP,GAAKC,IACjBF,EAAgBC,EAAIC,EAAIC,GAE5B,IAAIU,EAAMV,EAAMW,UAChBD,EAAMZ,GAAKC,GAAK,EAChBC,EAAMY,aAAaF,GACS,MAAxBV,EAAMK,MAAMP,GAAKC,IApBD,SAACC,GACrBA,EAAMa,WAAW,aACjBb,EAAMc,YAAW,GAEjB,IADA,IAAIL,EAAKT,EAAMO,WACNQ,EAAE,EAAGA,EAAEf,EAAMK,MAAMC,OAAQS,IAChC,IAAK,IAAIC,EAAE,EAAGA,EAAEhB,EAAMK,MAAM,GAAGC,OAAQU,IACX,MAApBhB,EAAMK,MAAMU,GAAGC,KACfP,EAAKM,GAAGC,GAAG,GACvBhB,EAAMiB,cAAcR,GAahBS,CAASlB,GACbA,EAAMiB,cAAcR,GAEpB,IADA,IAAIP,EAAM,EACDa,EAAE,EAAGA,EAAEf,EAAMK,MAAMC,OAAQS,IAChC,IAAK,IAAIC,EAAE,EAAGA,EAAEhB,EAAMK,MAAM,GAAGC,OAAQU,IAClB,IAAbP,EAAKM,GAAGC,IACRd,IACRA,IAASF,EAAMK,MAAMC,OAAON,EAAMK,MAAM,GAAGC,OAAON,EAAMmB,QACxDnB,EAAMa,WAAN,gFAA0Fb,EAAMK,MAAMC,OAAtG,YAAgHN,EAAMK,MAAMC,OAA5H,0CAAoKN,EAAMmB,MAA1K,yCAAgNnB,EAAMoB,KAAKC,QAAQ,GAAnO,gDAA6QrB,EAAMsB,YACnRtB,EAAMc,YAAW,KAIZS,EAAO,SAACzB,EAAKC,EAAKC,GAC3B,IAAIS,EAAKT,EAAMO,WACf,GAAqB,IAAjBE,EAAKX,GAAKC,GAAU,CACpB,GAAIC,EAAMwB,YAAYxB,EAAMmB,MACxB,OACJV,EAAKX,GAAKC,GAAK,EACfC,EAAMyB,aAAazB,EAAMwB,UAAU,QAGnCf,EAAKX,GAAKC,GAAK,EACfC,EAAMyB,aAAazB,EAAMwB,UAAU,GAEvC,IAAId,EAAMV,EAAMW,UAChBD,EAAMZ,GAAKC,GAAK,EAChBC,EAAMY,aAAaF,GACnBV,EAAMiB,cAAcR,IAGXiB,EAAc,SAACC,EAAO7B,EAAKC,EAAKC,GACzC,GAAiC,IAA7BA,EAAMO,WAAWT,GAAKC,IAAoB,MAAR4B,IAA+B,IAAhB3B,EAAM4B,SAAgC,IAAb5B,EAAMoB,MAIpF,IAAIpB,EAAM6B,QAAQvB,OAElB,OAAQN,EAAMO,WAAWT,GAAKC,IAC1B,KAAK,EAAW,MAAR4B,EAAYnB,EAAQV,EAAIC,EAAKC,GAAOuB,EAAKzB,EAAIC,EAAKC,GAClD,MACR,KAAK,EAAGuB,EAAKzB,EAAIC,EAAKC,GACd,MACR,KAAK,EAAGH,EAAgBC,EAAIC,EAAKC,GACzB,MACR,QAAS,aAZT8B,EAAShC,EAAIC,EAAIC,IAgBZ8B,EAAY,SAAChC,EAAKC,EAAKC,GAChC,IAGIK,EAHAc,EAAMnB,EAAMmB,MACZY,EAAK/B,EAAMK,MAAM,GAAGC,OACpB0B,EAAQhC,EAAMK,MAAMC,OAExB,EAAG,CACCD,EAAM4B,EAAM,CAACD,EAASD,IACtB,IAAK,IAAIhB,EAAI,EAAGA,EAAImB,KAAKC,IAAIhB,EAAOY,EAAKC,GAAUjB,IAAK,CAEpD,IADA,IAAIqB,EAAOF,KAAKG,MAAMH,KAAKI,SAAWN,EAAUD,GACa,MAAtD1B,EAAM+B,EAAOJ,GAASE,KAAKG,MAAMD,EAAOJ,KAAsBE,KAAKK,IAAKH,EAAOJ,EAASlC,GAAK,GAAKoC,KAAKK,IAAKL,KAAKG,MAAMD,EAAOJ,GAAUjC,GAAK,GAChJqC,EAAOF,KAAKG,MAAMH,KAAKI,SAAWN,EAAUD,GAChD1B,EAAM+B,EAAOJ,GAASE,KAAKG,MAAMD,EAAOJ,IAAY,IAExD,IAAKjB,EAAI,EAAGA,EAAIiB,EAASjB,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAIe,EAAMf,IACtB,GAAoB,MAAhBX,EAAMU,GAAGC,GAGb,IADA,IAAIf,EAAQ,EAAE,EAAG,EAAG,GACXE,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACfW,EAAId,EAAME,IAAM,GAAKY,EAAId,EAAME,GAAK6B,GAAWhB,EAAIf,EAAMG,IAAM,GAAKY,EAAIf,EAAMG,GAAK2B,GAC7C,MAAtC1B,EAAMU,EAAId,EAAME,IAAIa,EAAIf,EAAMG,KAC9BC,EAAMU,GAAGC,YAKxBwB,EAAW1C,EAAKC,EAAKC,EAAOK,IACrC,IAAIE,EAAWP,EAAMO,WACrBkC,EAASlC,EAAYT,EAAKC,EAAKM,GAC/BL,EAAMiB,cAAcV,GACpBP,EAAM0C,SAASrC,GACfL,EAAMc,YAAW,IAGd,SAAS2B,EAASlC,EAAYT,EAAKC,EAAKM,GAE3C,GADAE,EAAWT,GAAKC,GAAK,EACC,IAAlBM,EAAMP,GAAKC,GAEX,IADA,IAAIE,EAAQ,EAAE,EAAG,EAAG,GACXE,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACfN,EAAMG,EAAME,IAAM,GAAKL,EAAMG,EAAME,GAAKE,EAAMC,QAAUP,EAAME,EAAMG,IAAM,GAAKL,EAAME,EAAMG,GAAKC,EAAM,GAAGC,QAAmD,IAAzCC,EAAWT,EAAIG,EAAME,IAAIJ,EAAIE,EAAMG,KACtJqC,EAASlC,EAAYT,EAAIG,EAAME,GAAIJ,EAAIE,EAAMG,GAAIC,GAM9D,SAASmC,EAAW1C,EAAKC,EAAKC,EAAOK,GACxC,IAAIE,EAAW0B,EAAM,CAACjC,EAAMK,MAAMC,OAAQN,EAAMK,MAAM,GAAGC,SAEzD,IADAmC,EAASlC,EAAYT,EAAKC,EAAKM,KACtB,CACL,IAAIkB,EAAK,EACT,IAASzB,EAAI,EAAGA,EAAIE,EAAMK,MAAMC,OAAQR,IACpC,IAASC,EAAI,EAAGA,EAAIC,EAAMK,MAAM,GAAGC,OAAQP,IACvC,GAA2B,IAAvBQ,EAAWT,GAAKC,GAAU,CAI1B,IAHA,IAAIE,EAAQ,EAAE,EAAG,EAAG,GAChB0C,EAAQ,EACRC,EAAO,EACFzC,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACfN,EAAMG,EAAME,IAAM,GAAKL,EAAMG,EAAME,GAAKH,EAAMK,MAAMC,QAAUP,EAAME,EAAMG,IAAM,GAAKL,EAAME,EAAMG,GAAKJ,EAAMK,MAAM,GAAGC,SACxE,IAAzCC,EAAWT,EAAIG,EAAME,IAAIJ,EAAIE,EAAMG,KAASuC,IACH,IAAzCpC,EAAWT,EAAIG,EAAME,IAAIJ,EAAIE,EAAMG,KAASwC,KAI5D,GAAID,IAAUtC,EAAMP,GAAKC,GACzB,IAAKI,EAAI,EAAGA,EAAI,EAAGA,IACf,IAAKC,EAAI,EAAGA,EAAI,EAAGA,IACXN,EAAMG,EAAME,IAAM,GAAKL,EAAMG,EAAME,GAAKH,EAAMK,MAAMC,QAAUP,EAAME,EAAMG,IAAM,GAAKL,EAAME,EAAMG,GAAKJ,EAAMK,MAAM,GAAGC,QAAmD,IAAzCC,EAAWT,EAAIG,EAAME,IAAIJ,EAAIE,EAAMG,MACjKG,EAAWT,EAAIG,EAAME,IAAIJ,EAAIE,EAAMG,IAAI,EAAEmB,EAAK,GAI3D,GAAIqB,IAASvC,EAAMP,GAAKC,GAAK4C,GAAWC,EAAO,EAC/C,IAAKzC,EAAI,EAAGA,EAAI,EAAGA,IACf,IAAKC,EAAI,EAAGA,EAAI,EAAGA,IACXN,EAAMG,EAAME,IAAM,GAAKL,EAAMG,EAAME,GAAKH,EAAMK,MAAMC,QAAUP,EAAME,EAAMG,IAAM,GAAKL,EAAME,EAAMG,GAAKJ,EAAMK,MAAM,GAAGC,QAAmD,IAAzCC,EAAWT,EAAIG,EAAME,IAAIJ,EAAIE,EAAMG,MACjKG,EAAWT,EAAIG,EAAME,IAAIJ,EAAIE,EAAMG,IAAI,EAAEmB,EAAK,GAOvE,IAAIrB,EAAM,EACV,IAASJ,EAAI,EAAGA,EAAIE,EAAMK,MAAMC,OAAQR,IACpC,IAASC,EAAI,EAAGA,EAAIC,EAAMK,MAAM,GAAGC,OAAQP,IACZ,IAAvBQ,EAAWT,GAAKC,IAChBG,IAGZ,GAAIA,IAAQF,EAAMmB,OAAgC,IAAvBnB,EAAM6B,QAAQvB,OACrC,IAASR,EAAI,EAAGA,EAAIE,EAAMK,MAAMC,OAAQR,IACpC,IAASC,EAAI,EAAGA,EAAIC,EAAMK,MAAM,GAAGC,OAAQP,IACZ,IAAvBQ,EAAWT,GAAKC,KACfQ,EAAWT,GAAKC,GAAK,EAAEwB,EAAK,GAI7C,GAAW,IAAPA,EACA,MAGR,IADA,IAAIrB,EAAM,EACDa,EAAE,EAAGA,EAAEf,EAAMK,MAAMC,OAAQS,IAChC,IAAK,IAAIC,EAAE,EAAGA,EAAEhB,EAAMK,MAAM,GAAGC,OAAQU,IACZ,IAAnBT,EAAWQ,GAAGC,IACdd,IACZ,OAAIA,IAASF,EAAMK,MAAMC,OAAON,EAAMK,MAAM,GAAGC,OAAON,EAAMmB,MAMzD,SAASc,EAAMY,GAElB,IADA,IAAIC,EAAQ,GACH/B,EAAI,EAAGA,EAAI8B,EAAW,KAAM9B,EACjC+B,EAAMC,KAA0B,IAArBF,EAAWvC,OAAc,EAAI2B,EAAMY,EAAWG,MAAM,KACnE,OAAOF,EAGJ,SAASG,EAAYlB,EAAMmB,EAAMlD,GACpC+B,EAAKA,GAAO/B,EAAM+B,MAAQ,GAC1BmB,EAAKA,GAAOlD,EAAMkD,MAAQ,GAC1BlD,EAAM0C,SAAST,EAAM,CAACiB,EAAMnB,KAC5B/B,EAAMiB,cAAcgB,EAAM,CAACiB,EAAMnB,KACjC/B,EAAMY,aAAaqB,EAAM,CAACiB,EAAMnB,KAChC/B,EAAMa,WAAW,IACjBb,EAAMyB,aAAa,GACnBzB,EAAMc,YAAW,GACjBd,EAAMmD,aAAa,GACnBC,YAAW,kBAAKpD,EAAMqD,QAAQ,KAAI,KAGtC,SAASC,EAAUC,GACf,OAAOA,EAAO,GAAGC,KAAI,SAAC1D,EAAK2D,GAAN,OAAYF,EAAOC,KAAI,SAACzD,EAAK2D,GAAN,OAAYH,EAAOG,GAAGD,SAW/D,SAASE,EAAM3D,GAClB,GAAiB,IAAbA,EAAMoB,KAAV,CAEApB,EAAMmD,aAAanD,EAAMsB,UAAU,GAGnC,IAFA,IAAIC,EAAK,EACLd,EAAKT,EAAMW,UACNI,EAAE,EAAGA,EAAEf,EAAMK,MAAMC,OAAQS,IAChC,IAAK,IAAIC,EAAE,EAAGA,EAAEhB,EAAMK,MAAM,GAAGC,OAAQU,IACN,IAAzBhB,EAAMO,WAAWQ,GAAGC,IAA6B,KAAnBhB,EAAMK,MAAMU,GAAGC,KAC7CP,EAAKM,GAAGC,GAAG,EACXO,EAAK,GAIjB,IAAIA,EAAJ,CAEA,IAAK,IAAIzB,EAAI,EAAGA,EAAIE,EAAMK,MAAMC,OAAQR,IACpC,IAAK,IAAIC,EAAI,EAAGA,EAAIC,EAAMK,MAAM,GAAGC,OAAQP,IACvC,GAAiC,IAA7BC,EAAMO,WAAWT,GAAKC,GAAU,CAIhC,IAHA,IAAIE,EAAQ,EAAE,EAAG,EAAG,GAChB0C,EAAQ,EACRC,EAAO,EACFzC,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACfN,EAAMG,EAAME,IAAM,GAAKL,EAAMG,EAAME,GAAKH,EAAMK,MAAMC,QAAUP,EAAME,EAAMG,IAAM,GAAKL,EAAME,EAAMG,GAAKJ,EAAMK,MAAM,GAAGC,SAClE,IAA/CN,EAAMO,WAAWT,EAAIG,EAAME,IAAIJ,EAAIE,EAAMG,KAASuC,IACH,IAA/C3C,EAAMO,WAAWT,EAAIG,EAAME,IAAIJ,EAAIE,EAAMG,KAASwC,KAIlE,GAAID,IAAU3C,EAAMK,MAAMP,GAAKC,GAC/B,IAAKI,EAAI,EAAGA,EAAI,EAAGA,IACf,IAAKC,EAAI,EAAGA,EAAI,EAAGA,IACXN,EAAMG,EAAME,IAAM,GAAKL,EAAMG,EAAME,GAAKH,EAAMK,MAAMC,QAAUP,EAAME,EAAMG,IAAM,GAAKL,EAAME,EAAMG,GAAKJ,EAAMK,MAAM,GAAGC,QAAyD,IAA/CN,EAAMO,WAAWT,EAAIG,EAAME,IAAIJ,EAAIE,EAAMG,MACxKK,EAAKX,EAAIG,EAAME,IAAIJ,EAAIE,EAAMG,IAAI,GAG7C,GAAIwC,IAAS5C,EAAMK,MAAMP,GAAKC,GAAK4C,GAAWC,EAAO,EACrD,IAAKzC,EAAI,EAAGA,EAAI,EAAGA,IACf,IAAKC,EAAI,EAAGA,EAAI,EAAGA,IACXN,EAAMG,EAAME,IAAM,GAAKL,EAAMG,EAAME,GAAKH,EAAMK,MAAMC,QAAUP,EAAME,EAAMG,IAAM,GAAKL,EAAME,EAAMG,GAAKJ,EAAMK,MAAM,GAAGC,QAAyD,IAA/CN,EAAMO,WAAWT,EAAIG,EAAME,IAAIJ,EAAIE,EAAMG,MACxKK,EAAKX,EAAIG,EAAME,IAAIJ,EAAIE,EAAMG,IAAI,GAMzD,IAAIF,EAAM,EACV,IAASJ,EAAI,EAAGA,EAAIE,EAAMK,MAAMC,OAAQR,IACpC,IAASC,EAAI,EAAGA,EAAIC,EAAMK,MAAM,GAAGC,OAAQP,IACN,IAA7BC,EAAMO,WAAWT,GAAKC,IACtBG,IAGZ,GAAIA,IAAQF,EAAMmB,OAAgC,IAAvBnB,EAAM6B,QAAQvB,OACrC,IAASR,EAAI,EAAGA,EAAIE,EAAMK,MAAMC,OAAQR,IACpC,IAASC,EAAI,EAAGA,EAAIC,EAAMK,MAAM,GAAGC,OAAQP,IACN,IAA7BC,EAAMO,WAAWT,GAAKC,KACtBU,EAAKX,GAAKC,GAAK,GAI/BC,EAAMY,aAAaH,K,WCrSjBmD,EAAUC,IAAMC,MAAK,SAAC9D,GACxB,MAAoC6D,IAAME,UAAS,GAAnD,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAY,SAACnC,EAAKmB,EAAK/B,GACzBnB,EAAMmE,QAAQpC,GACd/B,EAAMoE,QAAQlB,GACdlD,EAAMqE,SAASlD,GACf8B,EAAWlB,EAAMmB,EAAMlD,IAE3B,OAAO,sBAAKsE,UAAU,WAAf,YACAtE,EAAMK,MAAMC,QAAU,wBAAQgE,UAAU,MAAMC,QAAS,kBAAKvE,EAAMwE,wBAAuB,IAAnE,kBACzB,wBAAQD,QAAS,kBAAIN,GAAeD,IAApC,SAAkDA,EAAW,UAAU,WACtEA,EACD,eAAC,IAAMS,SAAP,WACI,uBAAOC,KAAK,OAAOC,WAAS,EAACC,GAAG,QAAQC,YAAY,aAAaC,aAAa,QAC9E,uBAAOJ,KAAK,OAAOE,GAAG,QAAQC,YAAY,gBAAgBC,aAAa,QACvE,uBAAOJ,KAAK,OAAOE,GAAG,SAASC,YAAY,cAAcC,aAAa,QACtE,wBAAQR,UAAU,QAAQC,QAAS,WACnC,IAAIxE,EAAIgF,SAASC,eAAe,SAASC,MACrC9D,EAAM4D,SAASC,eAAe,UAAUC,MACxC/B,EAAK6B,SAASC,eAAe,SAASC,MACtClF,EAAI,IAAMmD,EAAK,GACfgC,OAAOC,MAAM,uCAGb,IAAIhE,EAAMpB,EAAImD,EACdgC,OAAOC,MAAM,2CAGLpF,EAAZA,EAAIO,OAAY8E,SAASrF,GAAU,EACtBmD,EAAbA,EAAK5C,OAAa8E,SAASlC,GAAY,EACzB/B,EAAdA,EAAMb,OAAc8E,SAASjE,GAAc,EAC3CnB,EAAMmE,QAAQpE,GAAOC,EAAM+B,MAAQ,IACnC/B,EAAMqE,SAASlD,GAASnB,EAAMmB,OAAS,IACvCnB,EAAMoE,QAAQlB,GAAQlD,EAAMkD,MAAQ,IACpCD,EAAWlD,EAAKmD,EAAMlD,GACtBA,EAAMwE,wBAAuB,KAnB7B,sBAwBF,eAAC,IAAMC,SAAP,WACE,wBAAQF,QAAS,WACbN,GAAc,GACdjE,EAAMwE,wBAAuB,GAC7BN,EAAU,EAAE,EAAE,KAHlB,4BAKA,wBAAQK,QAAS,WACbN,GAAeD,GACfhE,EAAMwE,wBAAuB,GAC7BN,EAAU,GAAG,GAAG,KAHpB,gCAKA,wBAAQK,QAAS,WACbN,GAAeD,GACfhE,EAAMwE,wBAAuB,GAC7BN,EAAU,GAAG,GAAG,KAHpB,8BAKA,wBAAQK,QAAS,WACbN,GAAeD,GACfhE,EAAMwE,wBAAuB,GAC7BN,EAAU,GAAG,GAAG,MAHpB,0CAUNmB,EAAOxB,IAAMC,MAAK,SAAC9D,GACrB,OAAO,sBAAKsE,UAAU,WAAf,UACH,wBAAQA,UAAU,MAAMC,QAAS,kBAAKtB,EAAWjD,EAAM+B,KAAM/B,EAAMkD,KAAMlD,IAAzE,2BACgBA,EAAM+B,KADtB,YAC8B/B,EAAMkD,QAEnClD,EAAM6B,QAAQvB,OACf,qBAAKgE,UAAU,SAAf,SAAyBtE,EAAM6B,UAC7B,eAAC,IAAM4C,SAAP,WACE,yBAAQF,QAAS,kBAAKvE,EAAMsF,kBAAkBtF,EAAMuF,gBAApD,UACA,qBAAKjB,UAAS,UAAKtE,EAAMuF,eAAzB,0BAGA,qBAAKjB,UAAS,WAAMtE,EAAMuF,eAA1B,6BAIA,qBAAKjB,UAAU,QAAf,SAAwB,gEAA0BtE,EAAMwB,UAAhC,gBAA0DxB,EAAMmB,WACxF,sBAAKmD,UAAU,QAAf,iDAAkEtE,EAAMoB,KAAKC,QAAQ,MACrF,wBAAQkD,QAAS,kBAAKZ,EAAK3D,IAA3B,qBAGJ,wBAAQsE,UAAU,QAAQC,QAAS,kBAAKvE,EAAMwE,wBAAuB,IAArE,4BAKFgB,EAAY3B,IAAMC,MAAK,SAAC9D,GAQ1B,OAPA6D,IAAM4B,WAAU,kBAChB,YAAIV,SAASW,iBAAiB,UAAUC,SACpC,SAAAC,GAAE,OAAIA,EAAGC,iBAAiB,eAAe,SAAAC,GAErC,OADAA,EAAEC,kBACK,KACR,SAEA,qBAAKzB,UAAU,YAAf,SACFtE,EAAMK,MAAMmD,KAAI,SAACzD,EAAKiG,GACnB,OAAO,qBAAK1B,UAAU,MAAf,SACFvE,EAAIyD,KAAI,SAACyC,EAAMC,GACZ,OAAO,qBACH5B,UACqC,IAAjCtE,EAAMO,WAAWyF,GAAOE,GAAxB,WACMlG,EAAMK,MAAM2F,GAAOE,IACU,IAAhClG,EAAMW,UAAUqF,GAAOE,GACpB,OADJ,WAEQlG,EAAMW,UAAUqF,GAAOE,IAErC3B,QAAS,kBAAI7C,EAAY1B,EAAMuF,cAAc,IAAI,IAAKS,EAAOE,EAAOlG,IACpEmG,cAAe,WAEX,OADAzE,EAAY1B,EAAMuF,cAAc,IAAI,IAAKS,EAAOE,EAAOlG,IAChD,GAXR,SAekC,IAAjCA,EAAMO,WAAWyF,GAAOE,GACd,MAAPD,EAAY,oDAAgBA,EACK,IAAjCjG,EAAMO,WAAWyF,GAAOE,IAAc,qDAjBhCA,OAFQF,WA4BvCI,EAAO,WACT,MAAwBvC,IAAME,SAAS,GAAvC,mBAAO3C,EAAP,KAAaiC,EAAb,KACA,EAAwBQ,IAAME,SAAS,GAAvC,mBAAOhC,EAAP,KAAaoC,EAAb,KACA,EAAwBN,IAAME,SAAS,GAAvC,mBAAOb,EAAP,KAAakB,EAAb,KACA,EAA0BP,IAAME,SAAS,GAAzC,mBAAO5C,EAAP,KAAckD,EAAd,KACA,EAA0BR,IAAME,SAAS,IAAzC,mBAAO1D,EAAP,KAAcqC,EAAd,KACA,EAA8BmB,IAAME,UAAS,GAA7C,mBAAOnC,EAAP,KAAgBd,EAAhB,KACA,EAA8B+C,IAAME,SAAS,IAA7C,mBAAOlC,EAAP,KAAgBhB,EAAhB,KACA,EAAkCgD,IAAME,SAAS,GAAjD,mBAAOvC,EAAP,KAAkBC,EAAlB,KACA,EAAkCoC,IAAME,SAAS,IAAjD,mBAAOpD,EAAP,KAAkBC,EAAlB,KACA,EAAkCiD,IAAME,SAAS,GAAjD,mBAAOzC,EAAP,KAAkB6B,EAAlB,KACA,EAAoCU,IAAME,SAAS,IAAnD,mBAAOxD,EAAP,KAAmBU,EAAnB,KACA,EAAoC4C,IAAME,UAAS,GAAnD,mBAAOsC,EAAP,KAAmBC,GAAnB,KACA,GAA0CzC,IAAME,UAAS,GAAzD,qBAAOwB,GAAP,MAAsBD,GAAtB,MACA,GAAsDzB,IAAME,UAAS,GAArE,qBAAOwC,GAAP,MAA4B/B,GAA5B,MA2BA,OAzBAO,SAASc,iBAAiB,oBAAoB,WACvCd,SAASyB,OACR1F,GAAW,GAGXA,KAAcM,EAAK,GAAsB,IAAjBS,EAAQvB,YAIxCuD,IAAM4B,WAAU,WACZ,IAAIgB,EAAW,KAOf,OANI7E,EACA6E,EAAWC,aAAY,WACnBrD,GAAQ,SAACjC,GAAD,OAAUA,EAAO,QAC1B,KAEDuF,cAAcF,GACb,WAAOE,cAAcF,MAC3B,CAAC7E,IAEJiC,IAAM4B,WAAU,WACV5D,EAAQvB,QACRkE,IAAuB,KAC1B,CAAC3C,IAEC,sBAAKyC,UAAU,SAAf,UACFiC,GACG,cAAC3C,EAAD,CACA7B,KAAMA,EACNmB,KAAMA,EACN/B,MAAOA,EACPd,MAAOA,EACP8D,QAASA,EACTC,QAASA,EACTf,QAASA,EACTgB,SAAUA,EACV/C,UAAWA,EACXoB,SAAUA,EACV5B,WAAYA,EACZD,WAAYA,EACZY,aAAcA,EACd0B,aAAcA,EACdvC,aAAcA,EACdK,cAAeA,EACfuD,uBAAwBA,KAGxB,cAACa,EAAD,CACAtD,KAAMA,EACNmB,KAAMA,EACN9B,KAAMA,EACND,MAAOA,EACPd,MAAOA,EACPgD,QAASA,EACTxB,QAASA,EACTa,SAAUA,EACVlB,UAAWA,EACXb,UAAWA,EACXJ,WAAYA,EACZO,WAAYA,EACZQ,UAAWA,EACXT,WAAYA,EACZY,aAAcA,EACd8D,cAAeA,GACfpC,aAAcA,EACdvC,aAAcA,EACdK,cAAeA,EACfqE,iBAAkBA,GAClBd,uBAAwBA,KAG5B,cAACgB,EAAD,CACIpE,KAAMA,EACND,MAAOA,EACPd,MAAOA,EACPuB,QAASA,EACTC,QAASA,EACTP,UAAWA,EACXoB,SAAUA,EACVlB,UAAWA,EACXb,UAAWA,EACXG,WAAYA,EACZP,WAAYA,EACZM,WAAYA,EACZsC,aAAcA,EACd1B,aAAcA,EACdb,aAAcA,EACdK,cAAeA,EACfsE,cAAeA,KAElBc,GAAc,sBAAK/B,UAAU,WAAf,2JAEgC,uBAAK,uBAFrC,mNAIqG,uBAAK,uBAJ1G,4GAK8F,uBAAK,uBALnG,kHAMoG,uBAAK,uBANzG,6JAQX,uBAAK,uBARM,2GAWf,wBAAQA,UAAU,OAAOsC,YAAa,kBAAIN,IAAc,IAAOO,aAAc,kBAAIP,IAAc,IAA/F,oBACA,wBAAQhC,UAAU,YAAYC,QAAS,kBAAIlE,EAAMC,QD1BlD,SAAuBD,EAAOqC,EAAUnC,EAAYU,EAAec,EAAMoC,EAASjB,EAAMkB,EAASzD,EAAWC,GAC/G8B,EAASY,EAAUjD,IACnBY,EAAcqC,EAAU/C,IACxBK,EAAa0C,EAAU3C,IACvBwD,EAAQjB,GACRkB,EAAQrC,GCqBuD+E,CAAazG,EAAOqC,EAAUnC,EAAYU,EAAec,EAAMoC,EAASjB,EAAMkB,EAASzD,EAAWC,IAA7J,wBAIOiD,MAAMC,KAAKsC,GC5P1BW,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJlC,SAASC,eAAe,U","file":"static/js/main.7934a9de.chunk.js","sourcesContent":["export const openSurrounding = (col, row, props) => {\r\n    let moves = [-1, 0, 1]\r\n    let count=0\r\n    for (var a = 0; a < 3; a++) {\r\n        for (var b = 0; b < 3; b++) {\r\n            if (col + moves[a] >= 0 && col + moves[a] < props.board.length && row + moves[b] >= 0 && row + moves[b] < props.board[0].length && props.boardState[col+moves[a]][row+moves[b]]===1)\r\n                count++;\r\n        }\r\n    }\r\n    if (count===props.board[col][row])\r\n    for (a = 0; a < 3; a++) {\r\n        for (b = 0; b < 3; b++) {\r\n            if (col + moves[a] >= 0 && col + moves[a] < props.board.length && row + moves[b] >= 0 && row + moves[b] < props.board[0].length && props.boardState[col+moves[a]][row+moves[b]]===0)\r\n                openBox(col+moves[a], row+moves[b], props)\r\n        }\r\n    }\r\n}\r\n\r\nexport const gameOver = (props) => {\r\n    props.setMessage(\"You lose!\")\r\n    props.setRunTime(false)\r\n    let temp=props.boardState;\r\n    for (var i=0; i<props.board.length; i++) \r\n        for (var j=0; j<props.board[0].length; j++)\r\n            if (props.board[i][j]==='X')\r\n                temp[i][j]=2\r\n    props.setBoardState(temp)     \r\n}\r\n\r\nexport const openBox = (col, row, props) => {\r\n    let temp=props.boardState;\r\n    temp[col][row]=2\r\n    if (props.board[col][row]===0) {\r\n        openSurrounding(col,row,props)\r\n    }\r\n    let temp1=props.hintState\r\n    temp1[col][row]=0\r\n    props.setHintState(temp1)\r\n    if (props.board[col][row]==='X')\r\n        gameOver(props);\r\n    props.setBoardState(temp)\r\n    let count=0\r\n    for (var i=0; i<props.board.length; i++) \r\n        for (var j=0; j<props.board[0].length; j++)\r\n            if (temp[i][j]===2)\r\n                count++;\r\n    if (count===(props.board.length*props.board[0].length-props.mines)) {\r\n        props.setMessage(`You won!\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0Grid: ${props.board.length}x${props.board.length}\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0Mines: ${props.mines}\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0Time: ${props.time.toFixed(1)}s\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0Hints Used: ${props.hintCount}`);\r\n        props.setRunTime(false)\r\n    }\r\n}\r\n\r\nexport const flag = (col, row, props) => {\r\n    let temp=props.boardState;\r\n    if (temp[col][row]===0) {\r\n        if (props.flagCount===props.mines)\r\n            return;\r\n        temp[col][row]=1;\r\n        props.setFlagCount(props.flagCount+1)\r\n    }\r\n    else {\r\n        temp[col][row]=0;\r\n        props.setFlagCount(props.flagCount-1)\r\n    }\r\n    let temp1=props.hintState\r\n    temp1[col][row]=0\r\n    props.setHintState(temp1)\r\n    props.setBoardState(temp)\r\n}\r\n\r\nexport const handleClick = (click, col, row, props) => {\r\n    if (props.boardState[col][row]===0 && click==='l' && props.runTime===false && props.time===0){\r\n        addMines(col,row,props)\r\n        return\r\n    }\r\n    if (props.message.length)\r\n        return\r\n    switch (props.boardState[col][row]) {\r\n        case 0: click==='l'?openBox(col,row, props):flag(col,row, props);\r\n                break;\r\n        case 1: flag(col,row, props);\r\n                break;\r\n        case 2: openSurrounding(col,row, props);\r\n                break;\r\n        default: return;\r\n    }\r\n}\r\n\r\nexport const addMines  = (col, row, props) => {\r\n    let mines=props.mines\r\n    let rows=props.board[0].length\r\n    let columns=props.board.length\r\n    let board\r\n    do {\r\n        board=zeros([columns, rows])\r\n        for (var i = 0; i < Math.min(mines, rows*columns); i++) {\r\n            let bomb = Math.floor(Math.random() * columns * rows)\r\n            while (board[bomb % columns][Math.floor(bomb / columns)] === \"X\" || (Math.abs((bomb % columns)-col)<2 && Math.abs((Math.floor(bomb / columns))-row)<2) )\r\n                bomb = Math.floor(Math.random() * columns * rows)\r\n            board[bomb % columns][Math.floor(bomb / columns)] = \"X\"\r\n        }\r\n        for (i = 0; i < columns; i++) {\r\n            for (var j = 0; j < rows; j++) {\r\n                if (board[i][j] === \"X\")\r\n                    continue;\r\n                let moves = [-1, 0, 1]\r\n                for (var a = 0; a < 3; a++) {\r\n                    for (var b = 0; b < 3; b++) {\r\n                        if (i + moves[a] >= 0 && i + moves[a] < columns && j + moves[b] >= 0 && j + moves[b] < rows &&\r\n                            board[i + moves[a]][j + moves[b]] === \"X\")\r\n                            board[i][j]++\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } while(!isSolvable(col, row, props, board))\r\n    let boardState=props.boardState\r\n    tempOpen(boardState, col, row, board)\r\n    props.setBoardState(boardState)\r\n    props.setBoard(board)\r\n    props.setRunTime(true)\r\n}\r\n\r\nexport function tempOpen(boardState, col, row, board) {\r\n    boardState[col][row]=2;\r\n    if (board[col][row]===0) {\r\n        let moves = [-1, 0, 1]\r\n        for (var a = 0; a < 3; a++) {\r\n            for (var b = 0; b < 3; b++) {\r\n                if (col + moves[a] >= 0 && col + moves[a] < board.length && row + moves[b] >= 0 && row + moves[b] < board[0].length && boardState[col+moves[a]][row+moves[b]]===0)\r\n                    tempOpen(boardState, col+moves[a], row+moves[b], board)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function isSolvable(col, row, props, board) {\r\n    let boardState=zeros([props.board.length, props.board[0].length])\r\n    tempOpen(boardState, col, row, board)\r\n    while(1) {\r\n        let flag=0;\r\n        for (var col=0; col<props.board.length; col++) {\r\n            for (var row=0; row<props.board[0].length; row++) {\r\n                if (boardState[col][row]===2) {\r\n                    let moves = [-1, 0, 1]\r\n                    let flagged=0\r\n                    let closed=0;\r\n                    for (var a = 0; a < 3; a++) {\r\n                        for (var b = 0; b < 3; b++) {\r\n                            if (col + moves[a] >= 0 && col + moves[a] < props.board.length && row + moves[b] >= 0 && row + moves[b] < props.board[0].length) {\r\n                                if (boardState[col+moves[a]][row+moves[b]]===1) flagged++;\r\n                                if (boardState[col+moves[a]][row+moves[b]]===0) closed++;\r\n                            }                            \r\n                        }\r\n                    }\r\n                    if (flagged===board[col][row]){\r\n                    for (a = 0; a < 3; a++) {\r\n                        for (b = 0; b < 3; b++) {\r\n                            if (col + moves[a] >= 0 && col + moves[a] < props.board.length && row + moves[b] >= 0 && row + moves[b] < props.board[0].length && boardState[col+moves[a]][row+moves[b]]===0)\r\n                                {boardState[col+moves[a]][row+moves[b]]=2;flag=1}\r\n                        }\r\n                    }\r\n                    }\r\n                    if (closed===board[col][row]-flagged && closed>0){\r\n                    for (a = 0; a < 3; a++) {\r\n                        for (b = 0; b < 3; b++) {\r\n                            if (col + moves[a] >= 0 && col + moves[a] < props.board.length && row + moves[b] >= 0 && row + moves[b] < props.board[0].length && boardState[col+moves[a]][row+moves[b]]===0)\r\n                                {boardState[col+moves[a]][row+moves[b]]=1;flag=1}\r\n                        }\r\n                    }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let count=0;\r\n        for (var col=0; col<props.board.length; col++) {\r\n            for (var row=0; row<props.board[0].length; row++) {\r\n                if (boardState[col][row]===1)\r\n                    count++;\r\n            }\r\n        }\r\n        if (count===props.mines && props.message.length===0) {\r\n            for (var col=0; col<props.board.length; col++) {\r\n                for (var row=0; row<props.board[0].length; row++) {\r\n                    if (boardState[col][row]===0)\r\n                        {boardState[col][row]=2;flag=1}\r\n                }\r\n            }\r\n        }\r\n        if (flag===0)\r\n            break;\r\n    }\r\n    let count=0\r\n    for (var i=0; i<props.board.length; i++) \r\n        for (var j=0; j<props.board[0].length; j++)\r\n            if (boardState[i][j]===2)\r\n                count++;\r\n    if (count===(props.board.length*props.board[0].length-props.mines))\r\n        return true;\r\n    else\r\n        return false;\r\n}\r\n\r\nexport function zeros(dimensions) {\r\n    var array = [];\r\n    for (var i = 0; i < dimensions[0]; ++i)\r\n        array.push(dimensions.length ===1 ? 0 : zeros(dimensions.slice(1)));\r\n    return array;\r\n}\r\n\r\nexport function initialize (rows, cols, props) {\r\n    rows=rows|| props.rows || 10\r\n    cols=cols|| props.cols || 10\r\n    props.setBoard(zeros([cols, rows]))\r\n    props.setBoardState(zeros([cols, rows]))\r\n    props.setHintState(zeros([cols, rows]))\r\n    props.setMessage(\"\")\r\n    props.setFlagCount(0)\r\n    props.setRunTime(false)\r\n    props.setHintCount(0)\r\n    setTimeout(()=> props.setTime(0), 150)\r\n}\r\n\r\nfunction transpose(matrix) {\r\n    return matrix[0].map((col, c) => matrix.map((row, r) => matrix[r][c]));\r\n  }\r\n\r\nexport function transposeAll (board, setBoard, boardState, setBoardState, rows, setRows, cols, setCols, hintState, setHintState) {\r\n    setBoard(transpose(board))\r\n    setBoardState(transpose(boardState))\r\n    setHintState(transpose(hintState))\r\n    setRows(cols)\r\n    setCols(rows)\r\n}\r\n \r\nexport function hint (props) {\r\n    if (props.time===0)\r\n        return;\r\n    props.setHintCount(props.hintCount+1)\r\n    let flag=0;\r\n    let temp=props.hintState;\r\n    for (var i=0; i<props.board.length; i++) {\r\n        for (var j=0; j<props.board[0].length; j++) {\r\n            if (props.boardState[i][j]===1 && props.board[i][j]!='X') {\r\n                temp[i][j]=2;\r\n                flag=1;\r\n            }\r\n        }\r\n    }\r\n    if (flag)\r\n        return;\r\n    for (var col=0; col<props.board.length; col++) {\r\n        for (var row=0; row<props.board[0].length; row++) {\r\n            if (props.boardState[col][row]===2) {\r\n                let moves = [-1, 0, 1]\r\n                let flagged=0\r\n                let closed=0;\r\n                for (var a = 0; a < 3; a++) {\r\n                    for (var b = 0; b < 3; b++) {\r\n                        if (col + moves[a] >= 0 && col + moves[a] < props.board.length && row + moves[b] >= 0 && row + moves[b] < props.board[0].length) {\r\n                            if (props.boardState[col+moves[a]][row+moves[b]]===1) flagged++;\r\n                            if (props.boardState[col+moves[a]][row+moves[b]]===0) closed++;\r\n                        }                            \r\n                    }\r\n                }\r\n                if (flagged===props.board[col][row])\r\n                for (a = 0; a < 3; a++) {\r\n                    for (b = 0; b < 3; b++) {\r\n                        if (col + moves[a] >= 0 && col + moves[a] < props.board.length && row + moves[b] >= 0 && row + moves[b] < props.board[0].length && props.boardState[col+moves[a]][row+moves[b]]===0)\r\n                            temp[col+moves[a]][row+moves[b]]=1;\r\n                    }\r\n                }\r\n                if (closed===props.board[col][row]-flagged && closed>0)\r\n                for (a = 0; a < 3; a++) {\r\n                    for (b = 0; b < 3; b++) {\r\n                        if (col + moves[a] >= 0 && col + moves[a] < props.board.length && row + moves[b] >= 0 && row + moves[b] < props.board[0].length && props.boardState[col+moves[a]][row+moves[b]]===0)\r\n                            temp[col+moves[a]][row+moves[b]]=2;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    let count=0;\r\n    for (var col=0; col<props.board.length; col++) {\r\n        for (var row=0; row<props.board[0].length; row++) {\r\n            if (props.boardState[col][row]===1)\r\n                count++;\r\n        }\r\n    }\r\n    if (count===props.mines && props.message.length===0) {\r\n        for (var col=0; col<props.board.length; col++) {\r\n            for (var row=0; row<props.board[0].length; row++) {\r\n                if (props.boardState[col][row]===0)\r\n                    temp[col][row]=1;\r\n            }\r\n        }\r\n    }\r\n    props.setHintState(temp)\r\n}\r\n\r\nexport function solve (props) {\r\n    hint (props)\r\n    setTimeout(()=>{\r\n        let chk=0;\r\n        for (var col=0; col<props.board.length; col++) {\r\n            for (var row=0; row<props.board[0].length; row++) {\r\n                if (props.hintState[col][row]!==0)\r\n                    chk=1;\r\n                if (props.hintState[col][row]===1)\r\n                    openBox(col, row, props)\r\n                if (props.hintState[col][row]===2)\r\n                    flag(col, row, props)\r\n            }\r\n        }\r\n        if (chk===1)\r\n            setTimeout(()=>\r\n            solve(props)\r\n            , 1000)\r\n    }, 1000)\r\n}","import './index.css';\r\nimport React from \"react\"\r\nimport { initialize, handleClick, hint, solve, transposeAll } from './functions';\r\n\r\nconst NewGame = React.memo((props) => {\r\n    const [showCustom, setShowCustom] = React.useState(true)\r\n\r\n    const setValues = (rows,cols,mines) => {\r\n        props.setRows(rows)\r\n        props.setCols(cols)\r\n        props.setMines(mines)\r\n        initialize(rows, cols, props)\r\n    }\r\n    return <div className=\"settings\">\r\n        {!!props.board.length && <button className=\"red\" onClick={()=> props.setShowNewGameSettings(false)}>Back</button>}\r\n        <button onClick={()=>setShowCustom(!showCustom)}>{showCustom?\"Presets\":\"Custom\"}</button>\r\n        {showCustom?\r\n        <React.Fragment>\r\n            <input type=\"text\" autoFocus id=\"rowno\" placeholder=\"Enter rows\" autoComplete=\"off\"/>\r\n            <input type=\"text\" id=\"colno\" placeholder=\"Enter columns\" autoComplete=\"off\"/>\r\n            <input type=\"text\" id=\"bombno\" placeholder=\"Enter mines\" autoComplete=\"off\"/> \r\n            <button className=\"green\" onClick={() => {\r\n            let row=document.getElementById(\"rowno\").value\r\n            let mines=document.getElementById(\"bombno\").value\r\n            let cols=document.getElementById(\"colno\").value\r\n            if (row>32 || cols>32) {\r\n                window.alert(\"Please limit rows and columns to 32\")\r\n                return;\r\n            }\r\n            if (2.5*mines>row*cols) {\r\n                window.alert(\"Please limit mines to 40% of the board\")\r\n                return;\r\n            }\r\n            row.length? row=parseInt(row): row=0\r\n            cols.length? cols=parseInt(cols): cols=0\r\n            mines.length? mines=parseInt(mines): mines=0\r\n            props.setRows(row || props.rows || 10)\r\n            props.setMines(mines || props.mines || 15)\r\n            props.setCols(cols || props.cols || 10)\r\n            initialize(row, cols, props)\r\n            props.setShowNewGameSettings(false)\r\n        }}>\r\n            Start\r\n        </button>\r\n        </React.Fragment>\r\n        : <React.Fragment>\r\n            <button onClick={()=> {\r\n                setShowCustom(true);\r\n                props.setShowNewGameSettings(false)\r\n                setValues(8,8,10)\r\n            }}>Easy - 8x8, 10</button>\r\n            <button onClick={()=> {\r\n                setShowCustom(!showCustom);\r\n                props.setShowNewGameSettings(false)\r\n                setValues(16,16,40)\r\n            }}>Medium - 16x16, 40</button>\r\n            <button onClick={()=> {\r\n                setShowCustom(!showCustom);\r\n                props.setShowNewGameSettings(false)\r\n                setValues(30,16,99)\r\n            }}>Hard - 30x16, 99</button>\r\n            <button onClick={()=> {\r\n                setShowCustom(!showCustom);\r\n                props.setShowNewGameSettings(false)\r\n                setValues(30,24,200)\r\n            }}>Expert - 30x24, 200</button>\r\n        </React.Fragment>\r\n        }  \r\n    </div>\r\n})\r\n\r\nconst Menu = React.memo((props) => {\r\n    return <div className=\"settings\">\r\n        <button className=\"red\" onClick={()=> initialize(props.rows, props.cols, props)}>\r\n            {`Reset - ${props.rows}x${props.cols}`}\r\n        </button>\r\n        {props.message.length?\r\n        <div className=\"result\">{props.message}</div>\r\n        : <React.Fragment>\r\n            <button onClick={()=> props.setDoesClickOpen(!props.doesClickOpen)}>\r\n            <div className={`${props.doesClickOpen}`}>\r\n                &#128128;\r\n            </div>\r\n            <div className={`${!props.doesClickOpen}`}>\r\n                &#128681;\r\n            </div>\r\n            </button>\r\n            <div className=\"count\">{<>&#128681;&#8199;&#8199;{props.flagCount}&#8199;/&#8199;{props.mines}</>}</div>\r\n            <div className=\"count\">&#9201;&#8199;&#8199;&#8199;&#8199;&#8199;{props.time.toFixed(1)}</div>\r\n            <button onClick={()=> hint(props)}>Hint</button>\r\n            {/* <button onClick={()=> solve(props)}>Solve</button> */}\r\n        </React.Fragment>}\r\n        <button className=\"green\" onClick={()=> props.setShowNewGameSettings(true)}>New Game</button>\r\n    </div>\r\n})\r\n\r\n\r\nconst Gameboard = React.memo((props) => {\r\n    React.useEffect(() =>\r\n    [...document.querySelectorAll(\".tile\")].forEach(\r\n        el => el.addEventListener('contextmenu', e => {\r\n            e.preventDefault();\r\n            return false\r\n        }, false)\r\n    ))\r\n    return <div className=\"gameboard\">\r\n        {props.board.map((row, colNo) => {\r\n            return <div className=\"row\" key={colNo}>\r\n                {row.map((tile, rowNo) => {\r\n                    return <div key={rowNo}\r\n                        className={\r\n                            props.boardState[colNo][rowNo]===2\r\n                            ? `a${props.board[colNo][rowNo]}`\r\n                            : (props.hintState[colNo][rowNo]===0)\r\n                                ? \"tile\"\r\n                                : `b${props.hintState[colNo][rowNo]}`\r\n                        }\r\n                        onClick={()=>handleClick(props.doesClickOpen?'l':'r', colNo, rowNo, props)}\r\n                        onContextMenu={()=>{\r\n                            handleClick(props.doesClickOpen?'r':'l', colNo, rowNo, props);\r\n                            return false;\r\n                        }}\r\n                        >\r\n                        {\r\n                            props.boardState[colNo][rowNo]===2\r\n                            ? (tile===\"X\"? <>&#128128;</>: tile)\r\n                            : (props.boardState[colNo][rowNo]===1 && <>&#128681;</>)\r\n                        }\r\n                    </div>\r\n                })}\r\n            </div>\r\n        })}\r\n    </div>\r\n})\r\n\r\nconst Main = () => {\r\n    const [time, setTime] = React.useState(0)\r\n    const [rows, setRows] = React.useState(0)\r\n    const [cols, setCols] = React.useState(0)\r\n    const [mines, setMines] = React.useState(0)\r\n    const [board, setBoard] = React.useState([])\r\n    const [runTime, setRunTime] = React.useState(false)\r\n    const [message, setMessage] = React.useState(\"\")\r\n    const [flagCount, setFlagCount] = React.useState(0)\r\n    const [hintState, setHintState] = React.useState([])\r\n    const [hintCount, setHintCount] = React.useState(0)\r\n    const [boardState, setBoardState] = React.useState([])\r\n    const [isHovering, setIsHovering] = React.useState(false)\r\n    const [doesClickOpen, setDoesClickOpen] = React.useState(true)\r\n    const [showNewGameSettings, setShowNewGameSettings] = React.useState(true)\r\n\r\n    document.addEventListener('visibilitychange', function() {\r\n        if(document.hidden) {\r\n            setRunTime(false)\r\n        }\r\n        else {\r\n            setRunTime(!!(time>0 && message.length===0))\r\n        }\r\n    });\r\n\r\n    React.useEffect(() => { \r\n        let interval = null;\r\n        if (runTime) {\r\n            interval = setInterval(() => {\r\n                setTime((time) => time + 0.1);\r\n            }, 100);\r\n        }\r\n        else {clearInterval(interval)}\r\n        return () => {clearInterval(interval)};\r\n      }, [runTime]);\r\n\r\n      React.useEffect(()=>{\r\n        if (message.length)\r\n            setShowNewGameSettings(false)\r\n      }, [message])\r\n\r\n    return <div className=\"screen\">\r\n        {showNewGameSettings\r\n        ?   <NewGame\r\n            rows={rows}\r\n            cols={cols}\r\n            mines={mines}    \r\n            board={board}\r\n            setRows={setRows}\r\n            setCols={setCols}\r\n            setTime={setTime}\r\n            setMines={setMines}\r\n            hintCount={hintCount}\r\n            setBoard={setBoard}\r\n            setRunTime={setRunTime}\r\n            setMessage={setMessage}\r\n            setFlagCount={setFlagCount}\r\n            setHintCount={setHintCount}\r\n            setHintState={setHintState}\r\n            setBoardState={setBoardState}\r\n            setShowNewGameSettings={setShowNewGameSettings}\r\n            />\r\n\r\n        :   <Menu       \r\n            rows={rows}\r\n            cols={cols}\r\n            time={time}\r\n            mines={mines}\r\n            board={board}\r\n            setTime={setTime}\r\n            message={message}\r\n            setBoard={setBoard}\r\n            flagCount={flagCount}\r\n            hintState={hintState}\r\n            boardState={boardState}\r\n            setRunTime={setRunTime}\r\n            hintCount={hintCount}\r\n            setMessage={setMessage}\r\n            setFlagCount={setFlagCount}\r\n            doesClickOpen={doesClickOpen}\r\n            setHintCount={setHintCount}\r\n            setHintState={setHintState}\r\n            setBoardState={setBoardState}\r\n            setDoesClickOpen={setDoesClickOpen}\r\n            setShowNewGameSettings={setShowNewGameSettings}\r\n            />\r\n        }\r\n        <Gameboard\r\n            time={time}\r\n            mines={mines}\r\n            board={board}\r\n            runTime={runTime}\r\n            message={message}\r\n            hintCount={hintCount}\r\n            setBoard={setBoard}\r\n            flagCount={flagCount}\r\n            hintState={hintState}\r\n            setRunTime={setRunTime}\r\n            boardState={boardState}\r\n            setMessage={setMessage}\r\n            setHintCount={setHintCount}\r\n            setFlagCount={setFlagCount}\r\n            setHintState={setHintState}\r\n            setBoardState={setBoardState}\r\n            doesClickOpen={doesClickOpen}\r\n        />\r\n        {isHovering && <div className=\"moreinfo\">\r\n            Using Artificial Intelligence, this game creates a random board that is guaranteed to be solvable.\r\n            Never lose a game because of a 50-50 guess!<br/><br/>\r\n            You can customize the game dimensions to your liking or use the international standard presets.\r\n            The default is 10x10 with 15 mines. Remember: if you add too many mines, the AI might not find a solvable board.<br/><br/>\r\n            Left click to open a box or right click to flag it. You may toggle this by clicking on the button on top.<br/><br/>\r\n            Clicking on an open box will open all surrounding boxes if all the mines of the original box have been flagged.<br/><br/>\r\n            The hint button will let you know if you've wrongly flagged any box, and if there's any unopened box that can be deduced to be either safe or have a mine.\r\n            <br/><br/> On the bottom right, you can change the board from vertical to horizontal based on your orientation.\r\n\r\n        </div>}\r\n        <button className=\"info\" onMouseOver={()=>setIsHovering(true)} onMouseLeave={()=>setIsHovering(false)}>&#9432;</button>\r\n        <button className=\"transpose\" onClick={()=>board.length && transposeAll(board, setBoard, boardState, setBoardState, rows, setRows, cols, setCols, hintState, setHintState)}>&#8634;</button>\r\n    </div>\r\n}\r\n\r\nexport default React.memo(Main)\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Main from \"./Main\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Main/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}